<?php

namespace App\Controller;

use App\Entity\News;
use phpDocumentor\Reflection\Types\String_;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Session\Session;

class NewsController extends AbstractController
{
    /**
     * @Route("/news/list", name="news_list")
     */
    public function list()
    {
        $session = new Session();
        $log=$session->get('email');
        return new Response('Poprawnie zalogowano użytkownika: '.$log);
        $news = $this->getDoctrine()->getRepository(News::class)->findBy([],['id'=>'DESC']);

        return $this->render('news/list.html.twig', [
            'news' => $news,
        ]);
    }

    /**
     * @Route("/news/add/{id}", name="news_edit", defaults={"id":0})
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function add($id,Request $request)
    {
        if($id==0)
        {
            $news = new News();
            $news->setDate(new \DateTime('today'));
            $form = $this->createFormBuilder($news)
                ->add('title', TextType::class)
                ->add('contents', TextareaType::class)
                ->add('date', DateType::class)
                ->add('image', FileType::class, array('label' => 'Zdjecie (JPG/PNG)'))
                ->add('add', SubmitType::class, array('label'=>'Dodaj'))
                ->getForm();
        } else
        {
            $news = $this->getDoctrine()->getRepository(News::class)->find($id);
            if(!$news)
            {
                throw $this->createNotFoundException('Brak news nr '.$id);
            }
            $form = $this->createFormBuilder($news)
                ->add('title', TextType::class)
                ->add('contents', TextareaType::class)
                ->add('date', DateType::class)
                ->add('image', TextType::class, array('label' => 'Zdjecie (JPG/PNG)'))
                ->add('add', SubmitType::class, array('label'=>'Edytuj'))
                ->getForm();
        }

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // $form->getData() holds the submitted values
            // but, the original `$task` variable has also been updated
            //$news = $form->getData();
            /** @var Symfony\Component\HttpFoundation\File\UploadFile $file */
            $file = $form->get('image')->getData();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move(
                $this->getParameter('images_directory'),
                $filename
            );
            $news->setImage($filename);

            // ... perform some action, such as saving the task to the database
            // for example, if Task is a Doctrine entity, save it!
            // $entityManager = $this->getDoctrine()->getManager();
            // $entityManager->persist($task);
            // $entityManager->flush();
            $entityManager = $this->getDoctrine()->getManager();
            // tell Doctrine you want to (eventually) save the Product (no queries yet)
            $entityManager->persist($news);

            // actually executes the queries (i.e. the INSERT query)
            $entityManager->flush();

            return $this->redirect($this->generateUrl('news_list'));
            //return $this->redirectToRoute('news_list');
        }
        return $this->render('news/add.html.twig', array(
            'form' => $form->createView(),
            'img' => $news->getImage(),
        ));
    }
    /**
     * @Route("/news/delete/{id}", name="delete_news_id")
     */
    public function delete($id)
    {
        $news = $this->getDoctrine()->getRepository(News::class)->find($id);
        if(!$news)
        {
            throw $this->createNotFoundException('Brak news nr '.$id);
        }
        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->remove($news);
        $entityManager->flush();
        return new Response('Poprawnie usunięto news: '.$news->getTitle().' '.substr($news->getContents(),0,30));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
